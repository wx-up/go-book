// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/wx-up/go-book/interactive/events/articles"
	"github.com/wx-up/go-book/interactive/grpc"
	"github.com/wx-up/go-book/interactive/ioc"
	"github.com/wx-up/go-book/interactive/repository"
	"github.com/wx-up/go-book/interactive/repository/cache"
	"github.com/wx-up/go-book/interactive/repository/dao"
	"github.com/wx-up/go-book/interactive/service"
)

// Injectors from wire.go:

func InitInteractiveGRPCServer() *grpc.InteractiveServiceServer {
	db := ioc.CreateMysql()
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := ioc.CreateRedis()
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	return interactiveServiceServer
}

func InitApp() *App {
	logger := ioc.CreateLogger()
	db := ioc.CreateMysql()
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := ioc.CreateRedis()
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
	client := ioc.InitKafka()
	readEventKafkaConsumer := articles.NewReadEventKafkaConsumer(logger, interactiveRepository, client)
	v := ioc.CreateConsumers(readEventKafkaConsumer)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	server := ioc.CreateGRPCServer(interactiveServiceServer)
	app := &App{
		consumers: v,
		server:    server,
	}
	return app
}

// wire.go:

var ThirdPartySet = wire.NewSet(ioc.CreateRedis, ioc.CreateMysql, ioc.CreateLogger, ioc.InitKafka)

var InteractiveSvcSet = wire.NewSet(dao.NewGORMInteractiveDAO, cache.NewInteractiveRedisCache, repository.NewCachedInteractiveRepository, service.NewInteractiveService)
