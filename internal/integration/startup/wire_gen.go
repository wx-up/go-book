// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/wx-up/go-book/internal/repository"
	"github.com/wx-up/go-book/internal/repository/cache"
	"github.com/wx-up/go-book/internal/repository/dao"
	"github.com/wx-up/go-book/internal/service"
	"github.com/wx-up/go-book/internal/service/code"
	"github.com/wx-up/go-book/internal/web"
	"github.com/wx-up/go-book/internal/web/jwt"
	"github.com/wx-up/go-book/ioc"
)

// Injectors from wire.go:

func InitWebService() *gin.Engine {
	cmdable := InitTestRedis()
	redisJwtHandler := jwt.NewRedisJwtHandler(cmdable)
	v := ioc.CreateMiddlewares(redisJwtHandler)
	db := InitTestMysql()
	userDAO := CreateUserDAO(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewCacheUserRepository(userDAO, userCache)
	logger := CreateLogger()
	userService := service.NewUserService(userRepository, logger)
	smsService := CreateLocalSMSService()
	codeCache := cache.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewCacheCodeRepository(codeCache)
	codeService := code.NewSmsCodeService(smsService, codeRepository)
	userHandler := web.NewUserHandler(userService, codeService, cmdable, redisJwtHandler)
	wechatService := CreateOAuth2WechatService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, redisJwtHandler)
	articleDAO := CreateArticleDAO(db)
	cacheArticleRepository := repository.NewCacheArticleRepository(articleDAO)
	articleService := service.NewArticleService(cacheArticleRepository)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, interactiveService)
	engine := ioc.InitWeb(v, userHandler, oAuth2WechatHandler, articleHandler)
	return engine
}

func CreateArticleHandler() *web.ArticleHandler {
	db := InitTestMysql()
	articleDAO := CreateArticleDAO(db)
	cacheArticleRepository := repository.NewCacheArticleRepository(articleDAO)
	articleService := service.NewArticleService(cacheArticleRepository)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := InitTestRedis()
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, interactiveService)
	return articleHandler
}

func InitInteractiveService() service.InteractiveService {
	db := InitTestMysql()
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := InitTestRedis()
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	return interactiveService
}
