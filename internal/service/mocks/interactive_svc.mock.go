// Code generated by MockGen. DO NOT EDIT.
// Source: interactive_svc.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/interactive_svc.mock.go -package=svcmocks -source=interactive_svc.go InteractiveService
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	"github.com/wx-up/go-book/interactive/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveService is a mock of InteractiveService interface.
type MockInteractiveService struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveServiceMockRecorder
}

// MockInteractiveServiceMockRecorder is the mock recorder for MockInteractiveService.
type MockInteractiveServiceMockRecorder struct {
	mock *MockInteractiveService
}

// NewMockInteractiveService creates a new mock instance.
func NewMockInteractiveService(ctrl *gomock.Controller) *MockInteractiveService {
	mock := &MockInteractiveService{ctrl: ctrl}
	mock.recorder = &MockInteractiveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveService) EXPECT() *MockInteractiveServiceMockRecorder {
	return m.recorder
}

// CancelLike mocks base method.
func (m *MockInteractiveService) CancelLike(ctx context.Context, biz string, bid, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLike", ctx, biz, bid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractiveServiceMockRecorder) CancelLike(ctx, biz, bid, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractiveService)(nil).CancelLike), ctx, biz, bid, uid)
}

// Collected mocks base method.
func (m *MockInteractiveService) Collected(ctx context.Context, biz string, bid, uid int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collected", ctx, biz, bid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collected indicates an expected call of Collected.
func (mr *MockInteractiveServiceMockRecorder) Collected(ctx, biz, bid, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collected", reflect.TypeOf((*MockInteractiveService)(nil).Collected), ctx, biz, bid, uid)
}

// Get mocks base method.
func (m *MockInteractiveService) Get(ctx context.Context, biz string, bid, uid int64) (domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, biz, bid, uid)
	ret0, _ := ret[0].(domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveServiceMockRecorder) Get(ctx, biz, bid, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveService)(nil).Get), ctx, biz, bid, uid)
}

// GetByIds mocks base method.
func (m *MockInteractiveService) GetByIds(ctx context.Context, biz string, ids []int64) ([]domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, biz, ids)
	ret0, _ := ret[0].([]domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockInteractiveServiceMockRecorder) GetByIds(ctx, biz, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockInteractiveService)(nil).GetByIds), ctx, biz, ids)
}

// IncrReadCount mocks base method.
func (m *MockInteractiveService) IncrReadCount(ctx context.Context, biz string, bid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCount", ctx, biz, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCount indicates an expected call of IncrReadCount.
func (mr *MockInteractiveServiceMockRecorder) IncrReadCount(ctx, biz, bid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCount", reflect.TypeOf((*MockInteractiveService)(nil).IncrReadCount), ctx, biz, bid)
}

// Like mocks base method.
func (m *MockInteractiveService) Like(ctx context.Context, biz string, bid, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", ctx, biz, bid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockInteractiveServiceMockRecorder) Like(ctx, biz, bid, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractiveService)(nil).Like), ctx, biz, bid, uid)
}

// Liked mocks base method.
func (m *MockInteractiveService) Liked(ctx context.Context, biz string, bid, uid int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Liked", ctx, biz, bid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liked indicates an expected call of Liked.
func (mr *MockInteractiveServiceMockRecorder) Liked(ctx, biz, bid, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liked", reflect.TypeOf((*MockInteractiveService)(nil).Liked), ctx, biz, bid, uid)
}
